// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
  CUSTOM
}

enum Operation {
  ADDITION
  SUBTRACTION
  MULTIPLICATION
  DIVISION
}

enum Rating {
  SSS
  SS
  S
  A
  B
  C
  D
  E
}

enum PerkType {
  SHOW_ANSWER
  REMOVE_TWO_WRONG_ANSWER
  NEW_PROBLEM
  SHIELD
  EXTRA_TIME
  ADD_MAX_TIME
  DOUBLE_SCORE
  DOUBLE_COIN
  LUCKY_STRIKE
}

model User {
  id            String    @id @default(uuid())
  username      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  coin          Int       @default(0)

  accounts Account[]
  games    Game[]
  likes    GameLike[]
  perks    UserPerk[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model GameMode {
  id             String          @id @default(uuid())
  title          String
  description    String?         @db.Text
  difficulty     Difficulty      @default(EASY)
  order          Int             @default(1)
  gameOperations GameOperation[]
}

model GameOperation {
  id         String     @id @default(uuid())
  operation  Operation  @default(ADDITION)
  symbol     String     @default("+")
  difficulty Difficulty @default(EASY)
  gameModeId String

  digitRange GameDigitRange[]

  gameMode GameMode @relation(fields: [gameModeId], references: [id], onDelete: Cascade)
}

model GameDigitRange {
  id       String @id @default(uuid())
  digit    Int    @default(1)
  minRange Int    @default(1)
  maxRange Int    @default(9)
  order    Int    @default(1)

  gameOperationId String

  gameOperation GameOperation @relation(fields: [gameOperationId], references: [id], onDelete: Cascade)
}

model Game {
  id            String   @id @default(uuid())
  userId        String
  score         Int
  correct       Int
  wrong         Int
  totalAnswered Int
  gameTime      Int
  level         Int      @default(1)
  highestCombo  Int      @default(0)
  rating        Rating   @default(E)
  createdAt     DateTime @default(now())
  like          Int      @default(0)
  coin          Int      @default(0)

  user User @relation(fields: [userId], references: [id])

  likes GameLike[]
}

model GameLike {
  id        String   @id @default(uuid())
  userId    String
  gameId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])
}

model Perk {
  id          String   @id @default(uuid())
  name        String
  description String
  type        PerkType
  duration    Int      @default(0)
  price       Int
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users UserPerk[]
}

model UserPerk {
  id        String   @id @default(uuid())
  userId    String
  perkId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  perk Perk @relation(fields: [perkId], references: [id])
}
